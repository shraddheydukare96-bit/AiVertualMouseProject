import cv2
import mediapipe as mp
import time
import math


class handDetector:
    def __init__(self, mode=False, maxHands=2, detectionCon=0.5, trackCon=0.5):
        # store params
        self.mode = bool(mode)
        self.maxHands = int(maxHands)
        self.detectionCon = float(detectionCon)
        self.trackCon = float(trackCon)

        # mediapipe setup
        self.mpHands = mp.solutions.hands
        self.hands = self.mpHands.Hands(
            static_image_mode=self.mode,
            max_num_hands=self.maxHands,
            min_detection_confidence=self.detectionCon,
            min_tracking_confidence=self.trackCon,
        )
        self.mpDraw = mp.solutions.drawing_utils

        # tip landmark indices for thumb, index, middle, ring, pinky
        self.tipIds = [4, 8, 12, 16, 20]

        # state
        self.results = None
        self.lmList = []

    def findHands(self, img, draw=True):
        """Run hand detection and optionally draw landmarks."""
        imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        self.results = self.hands.process(imgRGB)

        if self.results.multi_hand_landmarks:
            for handLms in self.results.multi_hand_landmarks:
                if draw:
                    self.mpDraw.draw_landmarks(
                        img, handLms, self.mpHands.HAND_CONNECTIONS
                    )
        return img

    def findPosition(self, img, handNo=0, draw=True):
        """Return landmarks list [id, x, y] and a bbox (xmin, ymin, xmax, ymax)."""
        self.lmList = []
        bbox = None

        if self.results and self.results.multi_hand_landmarks:
            if handNo >= len(self.results.multi_hand_landmarks):
                return self.lmList, bbox

            myHand = self.results.multi_hand_landmarks[handNo]
            xList, yList = [], []

            h, w, _ = img.shape
            for id, lm in enumerate(myHand.landmark):
                cx, cy = int(lm.x * w), int(lm.y * h)
                xList.append(cx)
                yList.append(cy)
                self.lmList.append([id, cx, cy])
                if draw:
                    cv2.circle(img, (cx, cy), 5, (255, 0, 255), cv2.FILLED)

            if xList and yList:
                xmin, xmax = min(xList), max(xList)
                ymin, ymax = min(yList), max(yList)
                bbox = (xmin, ymin, xmax, ymax)
                if draw:
                    cv2.rectangle(
                        img,
                        (xmin - 20, ymin - 20),
                        (xmax + 20, ymax + 20),
                        (0, 255, 0),
                        2,
                    )

        return self.lmList, bbox

    def fingersUp(self):
        """Return a list of 5 ints (1 = finger up, 0 = down). Requires lmList set."""
        fingers = [0, 0, 0, 0, 0]
        if not self.lmList or len(self.lmList) <= max(self.tipIds):
            return fingers

        # Thumb: compare x with its preceding joint (works for front-facing, mirrored cam)
        # For right vs left hand flips, this heuristic generally works with autopy inversion.
        if self.lmList[self.tipIds[0]][1] > self.lmList[self.tipIds[0] - 1][1]:
            fingers[0] = 1

        # Other fingers: tip y is above PIP joint y (smaller y = higher on image)
        for i in range(1, 5):
            if self.lmList[self.tipIds[i]][2] < self.lmList[self.tipIds[i] - 2][2]:
                fingers[i] = 1

        return fingers

    def findDistance(self, p1, p2, img, draw=True, r=10, t=3):
        """Distance between two landmark indices p1 and p2. Returns (length, img, [x1,y1,x2,y2,cx,cy])."""
        if not self.lmList or p1 >= len(self.lmList) or p2 >= len(self.lmList):
            return 0.0, img, [0, 0, 0, 0, 0, 0]

        x1, y1 = self.lmList[p1][1:]
        x2, y2 = self.lmList[p2][1:]
        cx, cy = (x1 + x2) // 2, (y1 + y2) // 2

        if draw:
            cv2.line(img, (x1, y1), (x2, y2), (255, 0, 255), t)
            cv2.circle(img, (x1, y1), r, (255, 0, 255), cv2.FILLED)
            cv2.circle(img, (x2, y2), r, (255, 0, 255), cv2.FILLED)
            cv2.circle(img, (cx, cy), r, (0, 0, 255), cv2.FILLED)

        length = math.hypot(x2 - x1, y2 - y1)
        return length, img, [x1, y1, x2, y2, cx, cy]


# quick test (optional)
if __name__ == "__main__":
    pTime = 0
    cap = cv2.VideoCapture(0)
    detector = handDetector()
    while True:
        ret, img = cap.read()
        if not ret:
            continue
        img = detector.findHands(img)
        lmList, bbox = detector.findPosition(img)
        if lmList:
            _ = detector.fingersUp()
        cTime = time.time()
        fps = 1 / (cTime - pTime) if (cTime - pTime) > 0 else 0
        pTime = cTime
        cv2.putText(img, f"FPS: {int(fps)}", (10, 70), cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 255), 2)
        cv2.imshow("Test", img)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
